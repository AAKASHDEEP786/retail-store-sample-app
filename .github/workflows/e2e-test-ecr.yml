name: E2E Test (ECR Images)

on:
  workflow_run:
    workflows: ["Build and Push to Private ECR"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to use (default: latest commit SHA)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  e2e-test:
    name: E2E Test with ECR Images
    runs-on: ubuntu-latest
    environment: retail-shop
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine image tag
        id: image-tag
        run: |
          if [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          fi

      - name: Pull ECR images
        run: |
          IMAGE_TAG="${{ steps.image-tag.outputs.tag }}"
          ECR_REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          
          echo "Pulling images with tag: $IMAGE_TAG"
          
          # Pull all service images from ECR
          SERVICES=("cart" "catalog" "checkout" "orders" "ui")
          
          for service in "${SERVICES[@]}"; do
            echo "Pulling $service image..."
            
            if docker pull "$ECR_REPO/retail-store-sample-$service:$IMAGE_TAG"; then
              echo "Successfully pulled $service from ECR"
              docker tag "$ECR_REPO/retail-store-sample-$service:$IMAGE_TAG" "retail-store-sample-$service:e2e"
            else
              echo "Failed to pull $service from ECR, trying latest..."
              if docker pull "$ECR_REPO/retail-store-sample-$service:latest"; then
                echo "Successfully pulled $service:latest from ECR"
                docker tag "$ECR_REPO/retail-store-sample-$service:latest" "retail-store-sample-$service:e2e"
              else
                echo "Failed to pull $service from ECR, exiting..."
                exit 1
              fi
            fi
          done

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: kind
          version: v0.17.0

      - name: Load images to Kind
        run: |
          kind load docker-image retail-store-sample-cart:e2e
          kind load docker-image retail-store-sample-catalog:e2e
          kind load docker-image retail-store-sample-checkout:e2e
          kind load docker-image retail-store-sample-orders:e2e
          kind load docker-image retail-store-sample-ui:e2e

      - name: Deploy to Kind
        run: |
          # Create namespace
          kubectl create namespace retail-store --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy services using Helm with ECR images
          helm install cart src/cart/chart/ --namespace retail-store --set image.tag=e2e
          helm install catalog src/catalog/chart/ --namespace retail-store --set image.tag=e2e
          helm install checkout src/checkout/chart/ --namespace retail-store --set image.tag=e2e
          helm install orders src/orders/chart/ --namespace retail-store --set image.tag=e2e
          helm install ui src/ui/chart/ --namespace retail-store --set image.tag=e2e

      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=cart --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=catalog --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=checkout --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=orders --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=ui --namespace retail-store --timeout=300s

      - name: Port forward and test
        run: |
          # Port forward UI service
          kubectl port-forward svc/ui 8888:80 --namespace retail-store &
          sleep 10
          
          # Run basic health checks
          curl -f http://localhost:8888/health || exit 1
          
          # Cleanup port forward
          pkill -f "kubectl port-forward"

      - name: Generate test summary
        if: always()
        run: |
          echo "## E2E Test Summary" >> test-summary.md
          echo "- Image Tag: ${{ steps.image-tag.outputs.tag }}" >> test-summary.md
          echo "- ECR Repository: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> test-summary.md
          echo "- Test Date: $(date)" >> test-summary.md
          echo "- Status: ${{ job.status }}" >> test-summary.md
          echo "" >> test-summary.md

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-summary
          path: test-summary.md 