name: E2E Test (Simplified)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  docker-e2e:
    name: Docker E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          cd src/app
          docker-compose up --build -d
          sleep 60

      - name: Run E2E tests
        run: |
          # Wait for services to be ready
          timeout 300 bash -c 'until curl -f http://localhost:8888/health; do sleep 5; done'
          
          # Run basic health checks
          curl -f http://localhost:8888/health || exit 1
          curl -f http://localhost:8080/actuator/health || exit 1
          curl -f http://localhost:8081/health || exit 1
          curl -f http://localhost:8082/health || exit 1
          curl -f http://localhost:8083/health || exit 1

      - name: Cleanup
        if: always()
        run: |
          cd src/app
          docker-compose down

  kubernetes-e2e:
    name: Kubernetes E2E Tests
    runs-on: ubuntu-latest
    environment: retail-shop
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: |
          # Build all service images
          docker build -t retail-store-sample-cart:e2e src/cart/
          docker build -t retail-store-sample-catalog:e2e src/catalog/
          docker build -t retail-store-sample-checkout:e2e src/checkout/
          docker build -t retail-store-sample-orders:e2e src/orders/
          docker build -t retail-store-sample-ui:e2e src/ui/

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: kind
          version: v0.17.0

      - name: Load images to Kind
        run: |
          kind load docker-image retail-store-sample-cart:e2e
          kind load docker-image retail-store-sample-catalog:e2e
          kind load docker-image retail-store-sample-checkout:e2e
          kind load docker-image retail-store-sample-orders:e2e
          kind load docker-image retail-store-sample-ui:e2e

      - name: Deploy to Kind
        run: |
          # Create namespace
          kubectl create namespace retail-store --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy services using Helm
          helm install cart src/cart/chart/ --namespace retail-store --set image.tag=e2e
          helm install catalog src/catalog/chart/ --namespace retail-store --set image.tag=e2e
          helm install checkout src/checkout/chart/ --namespace retail-store --set image.tag=e2e
          helm install orders src/orders/chart/ --namespace retail-store --set image.tag=e2e
          helm install ui src/ui/chart/ --namespace retail-store --set image.tag=e2e

      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=cart --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=catalog --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=checkout --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=orders --namespace retail-store --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=ui --namespace retail-store --timeout=300s

      - name: Port forward and test
        run: |
          # Port forward UI service
          kubectl port-forward svc/ui 8888:80 --namespace retail-store &
          sleep 10
          
          # Run basic health checks
          curl -f http://localhost:8888/health || exit 1
          
          # Cleanup port forward
          pkill -f "kubectl port-forward" 