name: Deploy

on:
  push:
    branches: [gitops]
    paths: ['src/**']
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        service: [ui, catalog, cart, checkout, orders]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if service changed
        id: changed
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "^src/${{ matrix.service }}/" || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.service }} changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "⏭️ ${{ matrix.service }} unchanged"
          fi

      - name: Configure AWS credentials
        if: steps.changed.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        if: steps.changed.outputs.changed == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        if: steps.changed.outputs.changed == 'true'
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/retail-store-${SERVICE}"
          
          echo "🔨 Building ${SERVICE}:${TAG}"
          
          # Create ECR repo if it doesn't exist (ECR handles this gracefully)
          aws ecr describe-repositories --repository-names "retail-store-${SERVICE}" 2>/dev/null || \
          aws ecr create-repository --repository-name "retail-store-${SERVICE}" --image-scanning-configuration scanOnPush=true
          
          # Build and push
          docker build -t "${ECR_REPO}:${TAG}" -t "${ECR_REPO}:latest" "src/${SERVICE}/"
          docker push "${ECR_REPO}:${TAG}"
          docker push "${ECR_REPO}:latest"
          
          echo "✅ Pushed ${ECR_REPO}:${TAG}"
          echo "ECR_REPO=${ECR_REPO}" >> $GITHUB_ENV

      - name: Update Helm values
        if: steps.changed.outputs.changed == 'true'
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          ECR_REPO="${{ env.ECR_REPO }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          
          # Update image repository and tag
          sed -i "s|repository:.*|repository: ${ECR_REPO}|g" "${VALUES_FILE}"
          sed -i "s|tag:.*|tag: \"${TAG}\"|g" "${VALUES_FILE}"
          
          echo "✅ Updated ${VALUES_FILE}"

      - name: Commit changes
        if: steps.changed.outputs.changed == 'true'
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          
          git config --local user.email "gitops@github.com"
          git config --local user.name "GitOps Bot"
          
          if ! git diff --quiet "src/${SERVICE}/chart/values.yaml"; then
            git add "src/${SERVICE}/chart/values.yaml"
            git commit -m "🚀 Update ${SERVICE} to ${TAG}"
            
            # Simple retry logic
            for i in {1..3}; do
              git push && break || git pull --rebase
              sleep 1
            done
          fi
