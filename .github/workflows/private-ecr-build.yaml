name: Build and Push to Private ECR

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/private-ecr-build.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/private-ecr-build.yaml'
  workflow_dispatch:
  repository_dispatch:
    types: [ecr-build-trigger]

permissions:
  contents: write

env:
  AWS_REGION: eu-west-1
  AWS_ACCOUNT_ID: 565393041505

jobs:
  setup-ecr:
    name: Setup ECR Repositories
    runs-on: ubuntu-latest
    environment: retail-shop
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repositories if they don't exist
        run: |
          # List of required ECR repositories
          REPOS=("retail-store-sample-cart" "retail-store-sample-catalog" "retail-store-sample-checkout" "retail-store-sample-orders" "retail-store-sample-ui" "retail-store-sample-utils")
          
          for repo in "${REPOS[@]}"; do
            echo "Checking if repository $repo exists..."
            
            # Check if repository exists
            if aws ecr describe-repositories --repository-names "$repo" --region ${{ secrets.AWS_REGION }} 2>/dev/null; then
              echo "Repository $repo already exists"
            else
              echo "Creating repository $repo..."
              aws ecr create-repository \
                --repository-name "$repo" \
                --region ${{ secrets.AWS_REGION }} \
                --image-scanning-configuration scanOnPush=true \
                --encryption-configuration encryptionType=AES256
              
              echo "Repository $repo created successfully"
            fi
          done

  build-and-push:
    name: Build and Push Services
    runs-on: ubuntu-latest
    environment: retail-shop
    needs: setup-ecr
    strategy:
      matrix:
        service: [cart, catalog, checkout, orders, ui]
        include:
          - service: cart
            dockerfile: src/cart/Dockerfile
            context: src/cart
          - service: catalog
            dockerfile: src/catalog/Dockerfile
            context: src/catalog
          - service: checkout
            dockerfile: src/checkout/Dockerfile
            context: src/checkout
          - service: orders
            dockerfile: src/orders/Dockerfile
            context: src/orders
          - service: ui
            dockerfile: src/ui/Dockerfile
            context: src/ui

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Generate build metadata
        id: metadata
        run: |
          # Simplified build metadata with only branch-commit tag
          GIT_COMMIT=$(echo ${{ github.sha }} | cut -c1-7)
          GIT_BRANCH=${{ github.ref_name }}
          # Replace / with - in branch names
          GIT_BRANCH=${GIT_BRANCH//\//-}
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Single tag format: <branch>-<commit_sha>
          IMAGE_TAG="${GIT_BRANCH}-${GIT_COMMIT}"
          
          echo "git-commit=${GIT_COMMIT}" >> $GITHUB_OUTPUT
          echo "git-branch=${GIT_BRANCH}" >> $GITHUB_OUTPUT
          echo "build-date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          platforms: linux/amd64
          tags: localbuild/retail-store-sample-${{ matrix.service }}:${{ steps.metadata.outputs.image-tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.metadata.outputs.build-date }}
            org.opencontainers.image.revision=${{ steps.metadata.outputs.git-commit }}
            org.opencontainers.image.version=${{ steps.metadata.outputs.image-tag }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.title=Retail Store ${{ matrix.service }} Service
            org.opencontainers.image.description=Microservice for retail store ${{ matrix.service }} functionality

      - name: Verify Docker image exists
        run: |
          docker images
          docker inspect localbuild/retail-store-sample-${{ matrix.service }}:${{ steps.metadata.outputs.image-tag }}

      - name: Scan image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true  
        with:
          image-ref: localbuild/retail-store-sample-${{ matrix.service }}:${{ steps.metadata.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          exit-code: '1'  
          severity: 'CRITICAL'
          ignore-unfixed: true
          scanners: 'vuln,config,secret'  
          vuln-type: 'os,library'  
          skip-dirs: '/usr/local/lib,/usr/local/share' 

      - name: Check Trivy scan results
        if: steps.trivy-scan.outcome == 'failure' || steps.trivy-scan.outcome == 'success'
        run: |
          if [ -f "trivy-results-${{ matrix.service }}.sarif" ]; then
            echo "Trivy scan completed with results"
            if grep -q '"level": "error"' "trivy-results-${{ matrix.service }}.sarif"; then
              echo "Critical vulnerabilities found!"
              exit 1
            fi
          else
            echo "Warning: Trivy scan did not produce results"
          fi

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-image-${{ matrix.service }}'

      - name: Login to Amazon ECR
        if: success()
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and push to ECR
        if: success()
        run: |
          ECR_REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/retail-store-sample-${{ matrix.service }}"
          IMAGE_TAG="${{ steps.metadata.outputs.image-tag }}"
          
          # Tag the local image with ECR repository
          docker tag localbuild/retail-store-sample-${{ matrix.service }}:${IMAGE_TAG} ${ECR_REPO}:${IMAGE_TAG}
          
          # Push to ECR
          docker push ${ECR_REPO}:${IMAGE_TAG}
          
          echo "Pushed ${ECR_REPO}:${IMAGE_TAG} to ECR"

      - name: Update Helm values with branch-commit tag
        if: success() && github.ref == 'refs/heads/main'
        run: |
          IMAGE_TAG="${{ steps.metadata.outputs.image-tag }}"
          ECR_REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/retail-store-sample-${{ matrix.service }}"
          
          echo "Updating Helm values for ${{ matrix.service }}..."
          echo "   Repository: ${ECR_REPO}"
          echo "   Tag: ${IMAGE_TAG}"
          
          # Update the values.yaml file using yq
          yq eval ".image.repository = \"${ECR_REPO}\"" -i src/${{ matrix.service }}/chart/values.yaml
          yq eval ".image.tag = \"${IMAGE_TAG}\"" -i src/${{ matrix.service }}/chart/values.yaml
          
          echo "Updated ${{ matrix.service }} Helm values"
          
          # Create a summary file for manual review
          echo "## ${{ matrix.service }} Image Update" >> image-updates.md
          echo "- Repository: ${ECR_REPO}" >> image-updates.md
          echo "- Tag: ${IMAGE_TAG}" >> image-updates.md
          echo "- Git Commit: ${{ steps.metadata.outputs.git-commit }}" >> image-updates.md
          echo "- Build Date: ${{ steps.metadata.outputs.build-date }}" >> image-updates.md
          echo "" >> image-updates.md

      - name: Upload image updates summary
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: image-updates-${{ matrix.service }}
          path: image-updates.md

  trigger-helm-update:
    name: Trigger Helm Values Update
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && always()
    steps:
      - name: Trigger Helm Values Update Workflow
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"helm-values-update"}'
        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}