# name: Update Helm Values

# on:
#   repository_dispatch:
#     types: [helm-values-update]
#   workflow_dispatch:

# permissions:
#   contents: write

# jobs:
#   update-values:
#     name: Update Helm Values
#     runs-on: ubuntu-latest
#     environment: retail-shop
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           fetch-depth: 0  # Needed for git operations

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Install yq
#         run: |
#           sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
#           sudo chmod a+x /usr/local/bin/yq

#       - name: branch-commit tag
#         id: tag
#         run: |
#           # Simple branch-commit tagging strategy
#           GIT_COMMIT=$(git rev-parse --short HEAD)
#           GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
#           BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
#           # Create branch-commit tag (format: <branch>-<commit_sha>)
#           TAG="${GIT_BRANCH}-${GIT_COMMIT}"
          
#           echo "git-commit=${GIT_COMMIT}" >> $GITHUB_OUTPUT
#           echo "git-branch=${GIT_BRANCH}" >> $GITHUB_OUTPUT
#           echo "tag=${TAG}" >> $GITHUB_OUTPUT
#           echo "build-date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          
#           echo "Tag Information:"
#           echo "  Git Commit: ${GIT_COMMIT}"
#           echo "  Git Branch: ${GIT_BRANCH}"
#           echo "  Tag: ${TAG}"
#           echo "  Build Date: ${BUILD_DATE}"

#       - name: Update all Helm values with branch-commit tag
#         run: |
#           TAG="${{ steps.tag.outputs.tag }}"
#           SERVICES=("cart" "catalog" "checkout" "orders" "ui" "utils")
          
#           echo "Updating all services with tag: ${TAG}"
#           echo "AWS Account ID: ${{ secrets.AWS_ACCOUNT_ID }}"
#           echo "AWS Region: ${{ secrets.AWS_REGION }}"
          
#           for SERVICE in "${SERVICES[@]}"; do
#             echo "Processing service: ${SERVICE}"
            
#             # Construct ECR repository URL
#             ECR_REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/retail-store-sample-${SERVICE}"
            
#             echo "Repository: ${ECR_REPO}"
#             echo "Tag: ${TAG}"
            
#             # Verify values.yaml exists
#             VALUES_FILE="src/${SERVICE}/chart/values.yaml"
#             if [ ! -f "$VALUES_FILE" ]; then
#               echo "Warning: ${VALUES_FILE} not found, skipping..."
#               continue
#             fi
            
#             # Backup current values
#             cp "$VALUES_FILE" "${VALUES_FILE}.bak"
            
#             # Update the values.yaml file using yq with branch-commit tag
#             yq eval ".image.repository = \"${ECR_REPO}\"" -i "$VALUES_FILE"
#             yq eval ".image.tag = \"${TAG}\"" -i "$VALUES_FILE"
            
#             # Set imagePullPolicy to Always for development, can be overridden in values files
#             yq eval ".image.pullPolicy = \"Always\"" -i "$VALUES_FILE"
            
#             # Show the changes for this service
#             echo "Changes for ${SERVICE}:"
#             if ! git diff --no-prefix "$VALUES_FILE"; then
#               echo "No changes for ${SERVICE}"
#               # Restore original file if no changes to avoid empty commits
#               mv "${VALUES_FILE}.bak" "$VALUES_FILE"
#             else
#               echo "Updated ${SERVICE} values.yaml"
#               rm -f "${VALUES_FILE}.bak"
#             fi
#           done

#       - name: Commit and push Helm value updates
#         env:
#           GIT_AUTHOR_NAME: "GitHub Actions"
#           GIT_AUTHOR_EMAIL: "actions@github.com"
#           GIT_COMMITTER_NAME: "GitHub Actions"
#           GIT_COMMITTER_EMAIL: "actions@github.com"
#         run: |
#           TAG="${{ steps.tag.outputs.tag }}"
          
#           # Configure git
#           git config --global user.name "GitHub Actions"
#           git config --global user.email "actions@github.com"
          
#           # Check if there are any changes to commit
#           if git diff --quiet; then
#             echo "No changes to commit"
#             exit 0
#           fi
          
#           # Add all changed values.yaml files
#           git add src/*/chart/values.yaml
          
#           # Create commit message
#           COMMIT_MSG="chore: update all service images to ${TAG}"
#           COMMIT_DETAILS="\n\nUpdated container images to use tag: ${TAG}"
#           COMMIT_DETAILS+="\n- Git Commit: ${{ steps.tag.outputs.git-commit }}"
#           COMMIT_DETAILS+="\n- Git Branch: ${{ steps.tag.outputs.git-branch }}"
#           COMMIT_DETAILS+="\n- Build Date: ${{ steps.tag.outputs.build-date }}"
          
#           # Commit changes with a detailed message
#           git commit -m "${COMMIT_MSG}${COMMIT_DETAILS}" \
#                     --author="GitHub Actions <actions@github.com>"
          
#           # Push changes to the main branch
#           echo "Pushing changes to main branch..."
#           git push origin main
          
#           echo "Successfully updated all service images to tag: ${TAG}"
          
#           # Output the changes for the workflow summary
#           echo "## Helm Values Update Summary" >> $GITHUB_STEP_SUMMARY
#           echo "Updated all services to use tag: **${TAG}**" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "### Updated Services" >> $GITHUB_STEP_SUMMARY
#           echo "- Cart Service" >> $GITHUB_STEP_SUMMARY
#           echo "- Catalog Service" >> $GITHUB_STEP_SUMMARY
#           echo "- Checkout Service" >> $GITHUB_STEP_SUMMARY
#           echo "- Orders Service" >> $GITHUB_STEP_SUMMARY
#           echo "- UI Service" >> $GITHUB_STEP_SUMMARY
#           echo "- Utils Service" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "### Commit Details" >> $GITHUB_STEP_SUMMARY
#           echo "- **Git Commit**: ${{ steps.tag.outputs.git-commit }}" >> $GITHUB_STEP_SUMMARY
#           echo "- **Git Branch**: ${{ steps.tag.outputs.git-branch }}" >> $GITHUB_STEP_SUMMARY
#           echo "- **Build Date**: ${{ steps.tag.outputs.build-date }}" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
#           echo "ArgoCD will automatically detect these changes and deploy the updated images to the cluster." >> $GITHUB_STEP_SUMMARY 