name: Update Helm Charts

on:
  workflow_run:
    workflows: ["Build and Push Images"]
    types:
      - completed
    branches: [ gitops ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to update (ui, catalog, cart, checkout, orders, or all)'
        required: true
        default: 'all'
      image_tag:
        description: 'Image tag to use'
        required: false

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  update-helm:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        service: [ui, catalog, cart, checkout, orders]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get latest image tag
        id: get-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.image_tag }}" ]; then
            TAG="${{ github.event.inputs.image_tag }}"
          else
            # Get the latest tag from ECR
            REPO="retail-store-${{ matrix.service }}"
            TAG=$(aws ecr describe-images --repository-name $REPO \
              --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
              --output text 2>/dev/null || echo "latest")
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG for ${{ matrix.service }}"

      - name: Skip if manual dispatch with specific service
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.service != 'all' && github.event.inputs.service != matrix.service
        run: |
          echo "Skipping ${{ matrix.service }} - only updating ${{ github.event.inputs.service }}"
          exit 0

      - name: Update Helm values
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="${{ steps.get-tag.outputs.tag }}"
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          
          if [ ! -f "$VALUES_FILE" ]; then
            echo "‚ùå Values file not found: $VALUES_FILE"
            exit 1
          fi
          
          # Update repository and tag
          sed -i "s|repository:.*|repository: ${ECR_REGISTRY}/retail-store-${SERVICE}|g" $VALUES_FILE
          sed -i "s|tag:.*|tag: \"${TAG}\"|g" $VALUES_FILE
          
          echo "‚úÖ Updated $VALUES_FILE"
          echo "Repository: ${ECR_REGISTRY}/retail-store-${SERVICE}"
          echo "Tag: ${TAG}"

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          SERVICE="${{ matrix.service }}"
          TAG="${{ steps.get-tag.outputs.tag }}"
          
          if git diff --quiet src/${SERVICE}/chart/values.yaml; then
            echo "No changes to commit for $SERVICE"
          else
            git add src/${SERVICE}/chart/values.yaml
            git commit -m "üîÑ Update $SERVICE Helm chart to $TAG

            - Service: $SERVICE
            - Image tag: $TAG
            - Updated by: GitOps automation"
            
            # Push with retry logic
            for i in {1..3}; do
              if git push; then
                echo "‚úÖ Successfully pushed changes for $SERVICE"
                break
              else
                echo "‚ö†Ô∏è Push failed, attempt $i/3. Pulling latest changes..."
                git pull --rebase
                sleep 2
              fi
            done
          fi
