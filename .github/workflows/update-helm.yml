name: Update Helm Charts

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to update (ui, catalog, cart, checkout, orders, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - ui
          - catalog
          - cart
          - checkout
          - orders
      image_tag:
        description: 'Image tag to use (leave empty for latest from ECR)'
        required: false
        type: string
      trigger_source:
        description: 'Source that triggered this workflow'
        required: false
        default: 'manual'
        type: string
      build_commit:
        description: 'Commit SHA from build workflow'
        required: false
        type: string
      changed_services:
        description: 'Services that were changed in build'
        required: false
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  update-helm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ui, catalog, cart, checkout, orders]
      fail-fast: false
    permissions:
      contents: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Workflow Context
        run: |
          echo "## 🔄 Helm Update Context" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger Source:** ${{ github.event.inputs.trigger_source || 'manual' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Service:** ${{ github.event.inputs.service || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Commit:** ${{ github.event.inputs.build_commit || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Services:** ${{ github.event.inputs.changed_services || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Skip if not target service
        if: github.event.inputs.service != 'all' && github.event.inputs.service != matrix.service
        run: |
          echo "⏭️ Skipping ${{ matrix.service }} - only updating ${{ github.event.inputs.service }}"
          exit 0

      - name: Get latest image tag
        id: get-tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            TAG="${{ github.event.inputs.image_tag }}"
            echo "Using provided tag: $TAG"
          else
            # Get the latest tag from ECR
            REPO="retail-store-${{ matrix.service }}"
            echo "Checking ECR repository: $REPO"
            
            # Check if repository exists
            if aws ecr describe-repositories --repository-names $REPO --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
              # Get latest non-'latest' tag, sorted by push date
              TAG=$(aws ecr describe-images --repository-name $REPO \
                --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[?!contains(@, `latest`)][0]' \
                --output text 2>/dev/null)
              
              if [ "$TAG" == "None" ] || [ -z "$TAG" ] || [ "$TAG" == "null" ]; then
                # Fallback to any tag if no non-latest tags found
                TAG=$(aws ecr describe-images --repository-name $REPO \
                  --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
                  --output text 2>/dev/null || echo "latest")
              fi
              echo "Found latest tag: $TAG"
            else
              echo "⚠️ ECR repository $REPO not found, skipping ${{ matrix.service }}"
              exit 0
            fi
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Update Helm values
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="${{ steps.get-tag.outputs.tag }}"
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          
          if [ ! -f "$VALUES_FILE" ]; then
            echo "❌ Values file not found: $VALUES_FILE"
            exit 1
          fi
          
          echo "🔄 Updating $SERVICE with:"
          echo "  Repository: ${ECR_REGISTRY}/retail-store-${SERVICE}"
          echo "  Tag: ${TAG}"
          
          # Backup current values for comparison
          cp "$VALUES_FILE" "${VALUES_FILE}.backup"
          
          # Update repository and tag using more precise sed patterns
          sed -i.tmp "s|repository:.*|repository: ${ECR_REGISTRY}/retail-store-${SERVICE}|g" "$VALUES_FILE"
          sed -i.tmp "s|tag:.*|tag: \"${TAG}\"|g" "$VALUES_FILE"
          rm -f "${VALUES_FILE}.tmp"
          
          # Show what changed
          echo "=== Changes made ==="
          if diff "${VALUES_FILE}.backup" "$VALUES_FILE" >/dev/null 2>&1; then
            echo "No changes needed - values already up to date"
          else
            diff "${VALUES_FILE}.backup" "$VALUES_FILE" || true
          fi
          rm -f "${VALUES_FILE}.backup"
          
          echo "✅ Updated $VALUES_FILE"

      - name: Commit changes
        run: |
          git config --local user.email "gitops-automation@github.com"
          git config --local user.name "GitOps Automation"
          
          SERVICE="${{ matrix.service }}"
          TAG="${{ steps.get-tag.outputs.tag }}"
          TRIGGER_SOURCE="${{ github.event.inputs.trigger_source || 'manual' }}"
          
          if git diff --quiet src/${SERVICE}/chart/values.yaml; then
            echo "📝 No changes to commit for $SERVICE - values already current"
          else
            git add src/${SERVICE}/chart/values.yaml
            
            # Create detailed commit message
            COMMIT_MSG="🔄 Update $SERVICE Helm chart to $TAG

- Service: $SERVICE
- Image tag: $TAG
- Trigger: $TRIGGER_SOURCE"
            
            if [ -n "${{ github.event.inputs.build_commit }}" ]; then
              COMMIT_MSG="$COMMIT_MSG
- Build commit: ${{ github.event.inputs.build_commit }}"
            fi
            
            COMMIT_MSG="$COMMIT_MSG
- Updated by: GitOps automation"
            
            git commit -m "$COMMIT_MSG"
            
            # Push with enhanced retry logic
            for i in {1..5}; do
              if git push origin gitops; then
                echo "✅ Successfully pushed changes for $SERVICE"
                break
              else
                echo "⚠️ Push failed, attempt $i/5. Pulling latest changes..."
                git pull --rebase origin gitops
                sleep $((i * 2))
              fi
              
              if [ $i -eq 5 ]; then
                echo "❌ Failed to push after 5 attempts for $SERVICE"
                exit 1
              fi
            done
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: [update-helm]
    if: always()
    steps:
      - name: Helm Update Summary
        run: |
          echo "## 🎯 Helm Charts Update Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event.inputs.trigger_source || 'manual' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Service:** ${{ github.event.inputs.service || 'all' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ github.event.inputs.build_commit }}" ]; then
            echo "**Build Commit:** ${{ github.event.inputs.build_commit }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Branch:** gitops" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.update-helm.result }}" == "success" ]; then
            echo "✅ **Status:** Helm charts updated successfully" >> $GITHUB_STEP_SUMMARY
            echo "**Services processed:** ui, catalog, cart, checkout, orders" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Some Helm updates failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GitOps Flow:**" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Docker images built and pushed to ECR" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Helm charts updated with new image tags" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔄 ArgoCD will detect changes and deploy automatically" >> $GITHUB_STEP_SUMMARY
          echo "4. 📊 Monitor deployment status in your Kubernetes cluster" >> $GITHUB_STEP_SUMMARY
